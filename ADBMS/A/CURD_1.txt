// Connect to the MongoDB instance and create the database
use myDatabase;

// Create the 'students' collection and insert the sample data
db.students.insertMany([
  { name: "Raj", age: 22, subjects: ["Math", "Science"], graduated: false },
  { name: "Priya", age: 24, subjects: ["History", "Literature"], graduated: true },
  { name: "Anil", age: 23, subjects: ["Math", "Literature"], graduated: false },
  { name: "Sita", age: 25, subjects: ["Science", "Math"], graduated: true }
]);

// Insert a single document with validation checks for a new student
db.students.insertOne({ name: "Reema", age: 21, subjects: ["Math", "Science"], graduated: false });

// Remove documents
// Remove the document for the student named "Raj"
db.students.deleteOne({ name: "Raj" });

// Remove all documents for students who have not graduated
db.students.deleteMany({ graduated: false });

// Update documents
// Replace Priya's document with updated subjects
db.students.replaceOne(
  { name: "Priya" },
  { name: "Priya", age: 24, subjects: ["History", "Philosophy"], graduated: true }
);

// Update Anil's graduation status to true without replacing the entire document
db.students.updateOne(
  { name: "Anil" },
  { $set: { graduated: true } }
);

// Upsert Reema's document - update if exists, insert if not
db.students.updateOne(
  { name: "Reema" },
  { $set: { age: 21, subjects: ["Math", "Science"], graduated: false } },
  { upsert: true }
);

// Update all documents to add 'hasMath' field for students who have "Math" in their subjects
db.students.updateMany(
  { subjects: "Math" },
  { $set: { hasMath: true } }
);

// Return the updated document after changing Sita's graduation status to false
db.students.findOneAndUpdate(
  { name: "Sita" },
  { $set: { graduated: false } },
  { returnDocument: "after" }
);

// Execute queries
// Find and display all student documents
db.students.find().pretty();

// Find and display the document for the student named "Anil"
db.students.find({ name: "Anil" }).pretty();

// Retrieve all students older than 22 years
db.students.find({ age: { $gt: 22 } }).pretty();

// Retrieve students whose name is either "Sita" or who are 23 years old
db.students.find({ $or: [{ name: "Sita" }, { age: 23 }] }).pretty();

// Retrieve students who are not older than 23 years
db.students.find({ age: { $lte: 23 } }).pretty();

// Retrieve students whose age is not 22
db.students.find({ age: { $ne: 22 } }).pretty();

// Retrieve documents where the nickname field does not exist
db.students.find({ nickname: { $exists: false } }).pretty();

// Find students whose names end with the letter "a"
db.students.find({ name: /a$/ }).pretty();

// Find students who have "Math" as one of their subjects
db.students.find({ subjects: "Math" }).pretty();

// Execute a query using $where to find students older than 22 years
db.students.find({ $where: function() { return this.age > 22; } }).pretty();

// Limit the number of results to 2 when retrieving student documents
db.students.find().limit(2).pretty();

// Skip the first document and retrieve the rest
db.students.find().skip(1).pretty();

// Sort the student documents by age in ascending order
db.students.find().sort({ age: 1 }).pretty();

// Advanced query: find students older than 21, limit to 2, skip 1, and sort by name in ascending order
db.students.find({ age: { $gt: 21 } }).sort({ name: 1 }).skip(1).limit(2).pretty();




// Create the 'students' collection with validation rules
db.createCollection("students", {
  validator: {
    $jsonSchema: {
      bsonType: "object",
      required: ["name", "age", "subjects", "graduated"],
      properties: {
        name: {
          bsonType: "string",
          description: "must be a string and is required"
        },
        age: {
          bsonType: "int",
          minimum: 18,
          maximum: 100,
          description: "must be an integer between 18 and 100 and is required"
        },
        subjects: {
          bsonType: "array",
          items: {
            bsonType: "string"
          },
          description: "must be an array of strings and is required"
        },
        graduated: {
          bsonType: "bool",
          description: "must be a boolean and is required"
        }
      }
    }
  }
});

// Insert a single document for a new student, validation will be enforced automatically
try {
  db.students.insertOne({ name: "Reema", age: 21, subjects: ["Math", "Science"], graduated: false });
  print("Document inserted successfully");
} catch (e) {
  print("Error inserting document:", e.message);
}

