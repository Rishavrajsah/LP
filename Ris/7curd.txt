‚úÖ STEP 1: Project Setup
üìÅ Folder Structure:

user-management-app/
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ index.html       ‚Üê Frontend
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îî‚îÄ‚îÄ User.js          ‚Üê Mongoose User schema
‚îú‚îÄ‚îÄ server.js            ‚Üê Main server

üì¶ STEP 2: Initialize Project

mkdir user-management-app
cd user-management-app
npm init -y
npm install express mongoose body-parser cors bcryptjs jsonwebtoken

üõ†Ô∏è STEP 3: Connect to MongoDB Atlas
Go to https://www.mongodb.com/cloud/atlas

Create a free cluster

Create a database called userDB and collection users

Get your connection string (like below) and update credentials:

mongodb+srv://<username>:<password>@cluster0.mongodb.net/userDB
üìÑ STEP 4: Create models/User.js


// models/User.js
const mongoose = require("mongoose");

const userSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  password: String,
});

module.exports = mongoose.model("User", userSchema);
üöÄ STEP 5: Create server.js
js
Copy
Edit
// server.js
const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const cors = require("cors");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("./models/User");
const path = require("path");

const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, "public"))); // Serve HTML

// ‚úÖ MongoDB Atlas URI
mongoose.connect("mongodb+srv://<username>:<password>@cluster0.mongodb.net/userDB", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log("‚úÖ MongoDB connected"))
  .catch((err) => console.error("‚ùå DB connection error:", err));

const JWT_SECRET = "yourSecretKey";

app.post("/api/register", async (req, res) => {
  const { name, email, password } = req.body;
  const existing = await User.findOne({ email });
  if (existing) return res.status(400).json({ message: "User already exists" });

  const hashed = await bcrypt.hash(password, 10);
  const user = new User({ name, email, password: hashed });
  await user.save();
  res.json({ message: "User registered" });
});

app.post("/api/login", async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(400).json({ message: "User not found" });

  const match = await bcrypt.compare(password, user.password);
  if (!match) return res.status(401).json({ message: "Invalid password" });

  const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: "1h" });
  res.json({ token });
});

app.get("/api/profile", async (req, res) => {
  try {
    const token = req.headers.authorization;
    const decoded = jwt.verify(token, JWT_SECRET);
    const user = await User.findById(decoded.userId).select("-password");
    res.json(user);
  } catch {
    res.status(401).json({ message: "Unauthorized" });
  }
});

app.delete("/api/delete/:id", async (req, res) => {
  await User.findByIdAndDelete(req.params.id);
  res.json({ message: "User deleted" });
});

const PORT = 5000;
app.listen(PORT, () => console.log(`üöÄ Server running at http://localhost:${PORT}`));

‚úÖ public/index.html ‚Äì With CSS
html
Copy
Edit
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>User Dashboard</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f2f6fc;
      margin: 0;
      padding: 0;
    }

    .container {
      max-width: 400px;
      margin: 50px auto;
      background: white;
      padding: 30px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
      border-radius: 10px;
    }

    h2 {
      text-align: center;
      margin-bottom: 20px;
      color: #333;
    }

    input[type="text"],
    input[type="email"],
    input[type="password"] {
      width: 100%;
      padding: 10px;
      margin: 8px 0 16px;
      border: 1px solid #ccc;
      border-radius: 5px;
    }

    button {
      width: 100%;
      padding: 10px;
      background: #007bff;
      color: white;
      font-weight: bold;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      margin-bottom: 10px;
    }

    button:hover {
      background: #0056b3;
    }

    .section {
      margin-bottom: 30px;
    }

    #profileSection {
      display: none;
      text-align: center;
      background-color: #eaf1fb;
      padding: 20px;
      border-radius: 10px;
    }

    #profileSection p {
      margin: 10px 0;
      font-size: 16px;
    }

    hr {
      border: 0;
      height: 1px;
      background: #ddd;
      margin: 20px 0;
    }
  </style>
</head>
<body>
  <div class="container">

    <div class="section">
      <h2>Register</h2>
      <input type="text" id="regName" placeholder="Full Name">
      <input type="email" id="regEmail" placeholder="Email Address">
      <input type="password" id="regPassword" placeholder="Password">
      <button onclick="registerUser()">Register</button>
    </div>

    <hr>

    <div class="section">
      <h2>Login</h2>
      <input type="email" id="loginEmail" placeholder="Email Address">
      <input type="password" id="loginPassword" placeholder="Password">
      <button onclick="loginUser()">Login</button>
    </div>

    <div id="profileSection">
      <h2>Profile</h2>
      <div id="profileData"></div>
    </div>

  </div>

  <script>
    let authToken = "";

    async function registerUser() {
      const name = document.getElementById("regName").value;
      const email = document.getElementById("regEmail").value;
      const password = document.getElementById("regPassword").value;

      const res = await fetch("/api/register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, email, password })
      });

      const data = await res.json();
      alert(data.message);
    }

    async function loginUser() {
      const email = document.getElementById("loginEmail").value;
      const password = document.getElementById("loginPassword").value;

      const res = await fetch("/api/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password })
      });

      const data = await res.json();
      if (data.token) {
        authToken = data.token;
        alert("Login successful");
        document.getElementById("profileSection").style.display = "block";
        loadProfile();
      } else {
        alert(data.message);
      }
    }

    async function loadProfile() {
      const res = await fetch("/api/profile", {
        method: "GET",
        headers: { Authorization: authToken }
      });

      const data = await res.json();
      if (data.name) {
        document.getElementById("profileData").innerHTML = `
          <p><strong>Name:</strong> ${data.name}</p>
          <p><strong>Email:</strong> ${data.email}</p>
          <button onclick="deleteUser('${data._id}')">Delete My Account</button>
        `;
      }
    }

    async function deleteUser(id) {
      if (!confirm("Are you sure you want to delete your account?")) return;

      const res = await fetch(`/api/delete/${id}`, {
        method: "DELETE"
      });

      const data = await res.json();
      alert(data.message);
      location.reload();
    }
  </script>
</body>
</html>

‚ñ∂Ô∏è STEP 7: Run the Project
bash
Copy
Edit
node server.js
Then open:
üëâ http://localhost:5000 in your browser

